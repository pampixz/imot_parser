import os
import pandas as pd
from sqlalchemy import create_engine, text
from dotenv import load_dotenv
import datetime
import re
import logging
from typing import List, Dict, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class ExcelExporter:
    def __init__(self):
        self.db_host = os.getenv("DB_HOST")
        self.db_port = os.getenv("DB_PORT", "5432")
        self.db_user = os.getenv("DB_USER")
        self.db_password = os.getenv("DB_PASSWORD")
        self.db_name = os.getenv("DB_NAME")

    @staticmethod
    def sanitize_filename(text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        text = text.strip().lower()
        return re.sub(r"[^\w\-_.]", "_", text)

    def validate_db_connection(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        if not all([self.db_host, self.db_port, self.db_user, self.db_password, self.db_name]):
            raise EnvironmentError("–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∑–∞–¥–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")

    def build_db_uri(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        return (
            f"postgresql+psycopg2://{self.db_user}:{self.db_password}@"
            f"{self.db_host}:{self.db_port}/{self.db_name}"
        )

    def apply_filters(self, query: str, params: dict, filters: dict) -> tuple:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ SQL –∑–∞–ø—Ä–æ—Å—É"""
        if filters.get("apartment_type"):
            query += " AND LOWER(title) LIKE :apartment_type"
            params["apartment_type"] = f"%{filters['apartment_type'].lower()}%"

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ:
        if filters.get("min_area"):
            try:
                params["min_area"] = float(filters["min_area"])
                query += " AND area >= :min_area"
            except ValueError:
                raise ValueError("–ü–∞—Ä–∞–º–µ—Ç—Ä 'min_area' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

        if filters.get("rooms"):
            rooms = filters["rooms"]
            if rooms == "3+":
                query += " AND rooms >= 3"
            else:
                try:
                    rooms_int = int(rooms)
                    query += " AND rooms = :rooms"
                    params["rooms"] = rooms_int
                except ValueError:
                    raise ValueError("–ü–∞—Ä–∞–º–µ—Ç—Ä 'rooms' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ '3+'")

        if filters.get("balcony") == "yes":
            query += " AND description ILIKE '%–±–∞–ª–∫–æ–Ω%'"

        if filters.get("near_metro") == "yes":
            query += " AND description ILIKE '%–º–µ—Ç—Ä–æ%'"

        if filters.get("location_side"):
            side = filters["location_side"].lower()
            if side == "south":
                query += " AND (description ILIKE '%—é–≥%' OR description ILIKE '%—é–∂–Ω%')"
            elif side == "north":
                query += " AND (description ILIKE '%—Å–µ–≤–µ—Ä%' OR description ILIKE '%—Å–µ–≤–µ—Ä–Ω%')"

        return query, params

    def get_data_from_db(self, city: str, district: str, filters: dict = None) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.validate_db_connection()
        engine = create_engine(self.build_db_uri())

        base_query = """
        SELECT 
            title, price, currency, price_sqm, area, 
            floor, construction_type, year_built, description,
            district, city, url, agency, phone,
            scraped_at::date AS scraped_date
        FROM sofia_apartments
        WHERE LOWER(city) = :city AND LOWER(district) = :district
        """
        params = {"city": city.lower(), "district": district.lower()}

        if filters:
            base_query, params = self.apply_filters(base_query, params, filters)

        base_query += " ORDER BY scraped_at DESC"

        try:
            with engine.connect() as conn:
                logger.info("üîå –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î")
                df = pd.read_sql(text(base_query), conn, params=params)
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
                return df
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ë–î: {str(e)}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ë–î: {str(e)}")
        finally:
            engine.dispose()

    def prepare_dataframe(self, df: pd.DataFrame) -> pd.DataFrame:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ DataFrame –∫ —ç–∫—Å–ø–æ—Ä—Ç—É"""
        if "scraped_date" in df.columns:
            df["scraped_date"] = pd.to_datetime(df["scraped_date"]).dt.strftime("%Y-%m-%d")

        if "title" in df.columns:
            df["title"] = df["title"].str.replace(r"^–ü—Ä–æ–¥–∞–≤–∞\s*", "", regex=True)
            df = df.rename(columns={
                "title": "–¢–∏–ø –Ω–µ–¥–≤–∏–∂–µ–º–æ—Å—Ç–∏",
                "price": "–¶–µ–Ω–∞",
                "currency": "–í–∞–ª—é—Ç–∞",
                "price_sqm": "–¶–µ–Ω–∞ –∑–∞ –º¬≤",
                "area": "–ü–ª–æ—â–∞–¥—å",
                "floor": "–≠—Ç–∞–∂",
                "construction_type": "–¢–∏–ø —Å—Ç—Ä–æ–∏—Ç–µ–ª—Å—Ç–≤–∞",
                "year_built": "–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏",
                "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
                "district": "–†–∞–π–æ–Ω",
                "city": "–ì–æ—Ä–æ–¥",
                "url": "–°—Å—ã–ª–∫–∞",
                "agency": "–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ",
                "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
                "scraped_date": "–î–∞—Ç–∞ —Å–±–æ—Ä–∞"
            })
        return df

    def export_to_excel(
        self,
        city: str,
        district: str,
        listings: Optional[List[Dict]] = None,
        filters: Optional[dict] = None,
        keyword: Optional[str] = None  # üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ
    ) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Ñ–∞–π–ª"""
        logger.info(f"üì§ –ù–∞—á–∞–ª–æ —ç–∫—Å–ø–æ—Ä—Ç–∞: –≥–æ—Ä–æ–¥={city}, —Ä–∞–π–æ–Ω={district}")

        if not city or not district:
            raise ValueError("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã 'city' –∏ 'district' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")

        try:
            if listings is not None:
                df = pd.DataFrame(listings)
                if df.empty:
                    raise ValueError("–ü–µ—Ä–µ–¥–∞–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            else:
                filters = filters or {}
                if keyword and keyword.lower() != "all":
                    filters["apartment_type"] = keyword
                df = self.get_data_from_db(city, district, filters)
                if df.empty:
                    raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")

            df = self.prepare_dataframe(df)

            os.makedirs("exports", exist_ok=True)
            safe_city = self.sanitize_filename(city)
            safe_district = self.sanitize_filename(district)
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{safe_city}_{safe_district}_{timestamp}.xlsx"
            filepath = os.path.join("exports", filename)

            df.to_excel(filepath, index=False, engine='openpyxl')
            logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            print(f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: {filepath}")
            return filepath

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
            raise

def export_to_excel(city: str, district: str, listings: Optional[List[Dict]] = None, filters: Optional[dict] = None, keyword: Optional[str] = None) -> str:
    """–§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞"""
    exporter = ExcelExporter()
    return exporter.export_to_excel(city, district, listings, filters, keyword)

if __name__ == "__main__":
    try:
        result = export_to_excel("sofia", "lyulin-5", keyword="3-–°–¢–ê–ï–ù")
        print(f"–§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {result}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
