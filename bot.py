import logging
import os
import sys
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, ConversationHandler
)
from dotenv import load_dotenv
from excel_exporter import ExcelExporter

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
SPIDER_SCRIPT = os.path.join(SCRIPT_DIR, "run_spider_async.py")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.critical("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

SELECTING_ACTION, SELECTING_DISTRICT = range(2)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    logger.info(f"/start –æ—Ç {user.id}")
    return await show_action_menu(update, context, user)

async def show_action_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, user) -> int:
    keyboard = [
        [InlineKeyboardButton("üì¶ –ò–∑ –±–∞–∑—ã", callback_data="from_cache")],
        [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    text = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if update.message:
        await update.message.reply_text(text, reply_markup=markup)
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, reply_markup=markup)

    return SELECTING_ACTION

# –í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞
async def select_district(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data["mode"] = query.data

    keyboard = [
        [InlineKeyboardButton("–õ—é–ª–∏–Ω 5", callback_data="lyulin-5")],
        [InlineKeyboardButton("–î—Ä—É–∂–±–∞ 1", callback_data="druzhba-1")],
        [InlineKeyboardButton("–õ–æ–∑–µ–Ω–µ—Ü", callback_data="lozenets")]
    ]
    await query.edit_message_text("üèô –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=InlineKeyboardMarkup(keyboard))
    return SELECTING_DISTRICT

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–π–æ–Ω–∞
async def handle_district(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    district = query.data
    mode = context.user_data.get("mode")
    logger.info(f"–†–∞–π–æ–Ω –≤—ã–±—Ä–∞–Ω: {district} | –†–µ–∂–∏–º: {mode}")

    loading_msg = await query.edit_message_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...")

    try:
        if mode == "new_search":
            await loading_msg.edit_text("üîç –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Scrapy: {sys.executable} {SPIDER_SCRIPT} sofia {district} true")

            process = await asyncio.create_subprocess_exec(
                sys.executable, SPIDER_SCRIPT, "sofia", district, "true",
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )

            async def log_stream(stream, name):
                while True:
                    line = await stream.readline()
                    if not line:
                        break
                    logger.info(f"[{name}] {line.decode().rstrip()}")

            await asyncio.gather(
                log_stream(process.stdout, "stdout"),
                log_stream(process.stderr, "stderr")
            )

            return_code = await process.wait()
            if return_code != 0:
                logger.error(f"‚ùå –ü–∞—É–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: –∫–æ–¥ {return_code}")
                await loading_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ. –°–º. –ª–æ–≥–∏.")
                return await offer_restart(update, context)

            logger.info("‚úÖ –ü–∞—É–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.")
            await loading_msg.edit_text("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω, —Ñ–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç...")

        else:
            logger.info("üì¶ –†–µ–∂–∏–º: –∏–∑ –±–∞–∑—ã, –ø–∞—É–∫ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.")
            await loading_msg.edit_text("üì¶ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã...")

        exporter = ExcelExporter()
        export_path = exporter.export_to_excel("sofia", district)

        if not export_path or not os.path.exists(export_path):
            logger.warning("‚ö†Ô∏è –û—Ç—á—ë—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω.")
            await loading_msg.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç.")
            return await offer_restart(update, context)

        with open(export_path, "rb") as file:
            await query.message.reply_document(
                document=file,
                filename=os.path.basename(export_path),
                caption=f"üè° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ä–∞–π–æ–Ω–∞ {district.replace('-', ' ').title()}"
            )

        return await offer_restart(update, context)

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞–π–æ–Ω–∞:")
        await loading_msg.edit_text(f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}")
        return ConversationHandler.END

# –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
async def offer_restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [[InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="restart")]]
    await update.callback_query.message.reply_text(
        "‚úÖ –ì–æ—Ç–æ–≤–æ! –•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECTING_ACTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ restart
async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    context.user_data.clear()
    user = update.effective_user
    return await show_action_menu(update, context, user)

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message:
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", exc_info=context.error)
    try:
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        elif hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ error_handler: {e}")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
async def post_init(application):
    await application.bot.set_my_commands([
        ("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        ("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
    ])

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    application = ApplicationBuilder() \
        .token(BOT_TOKEN) \
        .post_init(post_init) \
        .build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECTING_ACTION: [
                CallbackQueryHandler(select_district, pattern="^(from_cache|new_search)$"),
                CallbackQueryHandler(restart, pattern="^restart$")
            ],
            SELECTING_DISTRICT: [CallbackQueryHandler(handle_district)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_message=False
    )

    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == "__main__":
    main()


